(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{175:function(e,t,n){"use strict";n.r(t);var o={computed:{data:function(){return this.$page.frontmatter},socialiteName:function(){return this.data.title}}},s=n(0),i=Object(s.a)(o,function(){var e=this,t=e.$createElement;return(e._self._c||t)("div",[e._v("\n    * You should now be able to use it like you would regularly use Socialite (assuming you have the facade installed):\n\n    ```php\n    return Socialite::with('"+e._s(e.socialiteName)+"')->redirect();\n    ```\n\n    ### Lumen Support\n\n    You can use Socialite providers with Lumen.  Just make sure that you have facade support turned on and that you follow the setup directions properly.\n\n    **Note:** If you are using this with Lumen, all providers will automatically be stateless since **Lumen** does not keep track of state.\n\n    Also, configs cannot be parsed from the `services[]` in Lumen.  You can only set the values in the `.env` file as shown exactly in this document.  If needed, you can\n      also override a config (shown below).\n\n\n    ### Stateless\n\n    * You can set whether or not you want to use the provider as stateless.  Remember that the OAuth provider (Twitter, Tumblr, etc) must support whatever option you choose.\n\n    **Note:** If you are using this with Lumen, all providers will automatically be stateless since **Lumen** does not keep track of state.\n\n    ```php\n    // to turn off stateless\n    return Socialite::with('"+e._s(e.socialiteName)+"')->stateless(false)->redirect();\n\n    // to use stateless\n    return Socialite::with('"+e._s(e.socialiteName)+"')->stateless()->redirect();\n    ```\n\n\n    ### Overriding a config\n\n    If you need to override the provider's environment or config variables dynamically anywhere in your application, you may use the following:\n\n    ```php\n    $clientId = \"secret\";\n    $clientSecret = \"secret\";\n    $redirectUrl = \"http://yourdomain.com/api/redirect\";\n    $additionalProviderConfig = ['site' => 'meta.stackoverflow.com'];\n    $config = new \\SocialiteProviders\\Manager\\Config($clientId, $clientSecret, $redirectUrl, $additionalProviderConfig);\n    return Socialite::with('"+e._s(e.socialiteName)+"')->setConfig($config)->redirect();\n    ```\n\n    ### Retrieving the Access Token Response Body\n\n    Laravel Socialite by default only allows access to the `access_token`.  Which can be accessed\n    via the `\\Laravel\\Socialite\\User->token` public property.  Sometimes you need access to the whole response body which\n    may contain items such as a `refresh_token`.\n\n    You can get the access token response body, after you called the `user()` method in Socialite, by accessing the property `$user->accessTokenResponseBody`;\n\n    ```php\n    $user = Socialite::driver('"+e._s(e.socialiteName)+"')->user();\n    $accessTokenResponseBody = $user->accessTokenResponseBody;\n    ```\n\n    "+e._s(e.socialiteName)+"\n\n    #### Reference\n\n    * [Laravel Socialite Docs](https://github.com/laravel/socialite)\n    * [Laracasts Socialite video](https://laracasts.com/series/whats-new-in-laravel-5/episodes/9)\n")])},[],!1,null,null,null);t.default=i.exports}}]);